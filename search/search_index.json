{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DECAF \u00b6 DECAF - DEcontamination and Classification of Amplicon Fragment Welcome to the DECAF documentation, a bioinformatics tool for the classification and decontamination of ITS (Internal Transcribed Spacer) sequences from plants. Main Features \u00b6 Classification of ITS sequences for plants Detection and filtering of contaminants Support of FASTQ/FASTA formats Command-line interface Modular architecture for extension to other markers and taxa Quick Start \u00b6 # Installation pip install decaf # Classification of sequences decaf --input_fastq data/test.fasta --output_folder output/ --taxa plants --barcode ITS --cpus 4 Documentation Structure \u00b6 [ ] Installation - How to install DECAF [ ] Getting Started - First steps with DECAF [ ] Guides - Detailed guides for specific tasks [ ] API Reference - Technical API documentation [ ] Contributing - How to contribute to the project","title":"DECAF"},{"location":"#decaf","text":"DECAF - DEcontamination and Classification of Amplicon Fragment Welcome to the DECAF documentation, a bioinformatics tool for the classification and decontamination of ITS (Internal Transcribed Spacer) sequences from plants.","title":"DECAF"},{"location":"#main-features","text":"Classification of ITS sequences for plants Detection and filtering of contaminants Support of FASTQ/FASTA formats Command-line interface Modular architecture for extension to other markers and taxa","title":"Main Features"},{"location":"#quick-start","text":"# Installation pip install decaf # Classification of sequences decaf --input_fastq data/test.fasta --output_folder output/ --taxa plants --barcode ITS --cpus 4","title":"Quick Start"},{"location":"#documentation-structure","text":"[ ] Installation - How to install DECAF [ ] Getting Started - First steps with DECAF [ ] Guides - Detailed guides for specific tasks [ ] API Reference - Technical API documentation [ ] Contributing - How to contribute to the project","title":"Documentation Structure"},{"location":"installation/","text":"Installation of DECAF \u00b6 Installation via PyPI \u00b6 The simplest way to install DECAF is via PyPI : pip install decaf Installation from Source \u00b6 Prerequisites \u00b6 Before installing DECAF, make sure you have the following dependencies : Python 3.8 or higher Git A NVIDIA graphics card (recommended for fast processing) pip (Python package manager) Installation Steps \u00b6 Clone the Repository git clone https://github.com/Aaramis/DECAF.git cd DECAF Create a Virtual Environment It is strongly recommended to use a virtual environment to manage dependencies. On Linux/Mac : python -m venv decaf-env source decaf-env/bin/activate Sur Windows : python -m venv decaf-env decaf-env \\S cripts \\a ctivate Install Dependencies Install the required dependencies : pip install -r requirements.txt For developers, install the development dependencies : pip install -r requirements-dev.txt Install DECAF in Development Mode pip install -e . Verification of Installation \u00b6 To verify that DECAF is correctly installed, run : decaf --version Environment Configuration \u00b6 Environment Variables \u00b6 DECAF uses the following environment variables : DECAF_CONFIG_PATH : Path to the configuration file DECAF_LOG_LEVEL : Log level (DEBUG, INFO, WARNING, ERROR) DECAF_GPU : Use GPU (0 to disable) Log Configuration \u00b6 The log configuration can be customized in the config/logging.yaml file. Troubleshooting \u00b6 Common Issues \u00b6 Python Version Error Ensure you are using Python 3.8 or higher Check the version with : python --version Permission Issues Use a virtual environment Run commands with appropriate permissions Missing Dependencies Verify that all dependencies are installed Reinstall dependencies if necessary Update \u00b6 To update DECAF : pip install --upgrade decaf Or from the source code : git pull pip install --upgrade -e . Uninstall \u00b6 To uninstall DECAF : pip uninstall decaf Support \u00b6 For any questions or issues, please : Open an issue on GitHub Consult the FAQ Contact the development team","title":"Installation"},{"location":"installation/#installation-of-decaf","text":"","title":"Installation of DECAF"},{"location":"installation/#installation-via-pypi","text":"The simplest way to install DECAF is via PyPI : pip install decaf","title":"Installation via PyPI"},{"location":"installation/#installation-from-source","text":"","title":"Installation from Source"},{"location":"installation/#prerequisites","text":"Before installing DECAF, make sure you have the following dependencies : Python 3.8 or higher Git A NVIDIA graphics card (recommended for fast processing) pip (Python package manager)","title":"Prerequisites"},{"location":"installation/#installation-steps","text":"Clone the Repository git clone https://github.com/Aaramis/DECAF.git cd DECAF Create a Virtual Environment It is strongly recommended to use a virtual environment to manage dependencies. On Linux/Mac : python -m venv decaf-env source decaf-env/bin/activate Sur Windows : python -m venv decaf-env decaf-env \\S cripts \\a ctivate Install Dependencies Install the required dependencies : pip install -r requirements.txt For developers, install the development dependencies : pip install -r requirements-dev.txt Install DECAF in Development Mode pip install -e .","title":"Installation Steps"},{"location":"installation/#verification-of-installation","text":"To verify that DECAF is correctly installed, run : decaf --version","title":"Verification of Installation"},{"location":"installation/#environment-configuration","text":"","title":"Environment Configuration"},{"location":"installation/#environment-variables","text":"DECAF uses the following environment variables : DECAF_CONFIG_PATH : Path to the configuration file DECAF_LOG_LEVEL : Log level (DEBUG, INFO, WARNING, ERROR) DECAF_GPU : Use GPU (0 to disable)","title":"Environment Variables"},{"location":"installation/#log-configuration","text":"The log configuration can be customized in the config/logging.yaml file.","title":"Log Configuration"},{"location":"installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/#common-issues","text":"Python Version Error Ensure you are using Python 3.8 or higher Check the version with : python --version Permission Issues Use a virtual environment Run commands with appropriate permissions Missing Dependencies Verify that all dependencies are installed Reinstall dependencies if necessary","title":"Common Issues"},{"location":"installation/#update","text":"To update DECAF : pip install --upgrade decaf Or from the source code : git pull pip install --upgrade -e .","title":"Update"},{"location":"installation/#uninstall","text":"To uninstall DECAF : pip uninstall decaf","title":"Uninstall"},{"location":"installation/#support","text":"For any questions or issues, please : Open an issue on GitHub Consult the FAQ Contact the development team","title":"Support"},{"location":"introduction/","text":"Introduction to DECAF \u00b6 DECAF (DEcontamination and Classification of Amplicon Fragment) is a bioinformatics framework designed for the analysis and decontamination of environmental DNA sequences. It uses deep learning models to enhance the reliability of genomic analyses. Objectives \u00b6 Sequence Classification ITS sequence identification Support for FASTQ and FASTA formats Contaminant Management Detection of non-target sequences Automatic contaminant filtering Generation of analysis reports Performance and Scalability Optimized for batch processing GPU support via PyTorch Modular extensible architecture Architecture \u00b6 DECAF is built around several key components : DECAF/ \u251c\u2500\u2500 models/ # Implementation of deep learning models \u251c\u2500\u2500 data/ # Data management and preprocessing \u251c\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 tests/ # Unit and integration tests \u2514\u2500\u2500 docs/ # Documentation Technologies Used \u00b6 Deep Learning Framework PyTorch PyTorch Lightning Transformers Data Management Polars Pandas Biopython Tests and Quality pytest pytest-cov black flake8 Use Cases \u00b6 DECAF is particularly useful for : Environmental Research Analysis of environmental DNA sequences Biodiversity studies Ecological monitoring Bioinformatics Processing of large datasets Taxonomic classification Sequence decontamination Academic Research Validation of experimental results Comparative analysis Phylogenetic studies Advantages \u00b6 Precision Optimized deep learning models Robust architecture Continuous validation Flexibility Support of multiple formats Extensibility Customization Performance GPU support via PyTorch Batch processing Memory optimization Next Steps \u00b6 To get started with DECAF, see the Installation section. For more information on specific features, see the API Documentation .","title":"Introduction"},{"location":"introduction/#introduction-to-decaf","text":"DECAF (DEcontamination and Classification of Amplicon Fragment) is a bioinformatics framework designed for the analysis and decontamination of environmental DNA sequences. It uses deep learning models to enhance the reliability of genomic analyses.","title":"Introduction to DECAF"},{"location":"introduction/#objectives","text":"Sequence Classification ITS sequence identification Support for FASTQ and FASTA formats Contaminant Management Detection of non-target sequences Automatic contaminant filtering Generation of analysis reports Performance and Scalability Optimized for batch processing GPU support via PyTorch Modular extensible architecture","title":"Objectives"},{"location":"introduction/#architecture","text":"DECAF is built around several key components : DECAF/ \u251c\u2500\u2500 models/ # Implementation of deep learning models \u251c\u2500\u2500 data/ # Data management and preprocessing \u251c\u2500\u2500 utils/ # Utility functions \u251c\u2500\u2500 tests/ # Unit and integration tests \u2514\u2500\u2500 docs/ # Documentation","title":"Architecture"},{"location":"introduction/#technologies-used","text":"Deep Learning Framework PyTorch PyTorch Lightning Transformers Data Management Polars Pandas Biopython Tests and Quality pytest pytest-cov black flake8","title":"Technologies Used"},{"location":"introduction/#use-cases","text":"DECAF is particularly useful for : Environmental Research Analysis of environmental DNA sequences Biodiversity studies Ecological monitoring Bioinformatics Processing of large datasets Taxonomic classification Sequence decontamination Academic Research Validation of experimental results Comparative analysis Phylogenetic studies","title":"Use Cases"},{"location":"introduction/#advantages","text":"Precision Optimized deep learning models Robust architecture Continuous validation Flexibility Support of multiple formats Extensibility Customization Performance GPU support via PyTorch Batch processing Memory optimization","title":"Advantages"},{"location":"introduction/#next-steps","text":"To get started with DECAF, see the Installation section. For more information on specific features, see the API Documentation .","title":"Next Steps"},{"location":"api/models/","text":"DECAF Models \u00b6 Overview \u00b6 DECAF uses deep learning models optimized for DNA analysis. The main models available are : its_plant : Model specialized for ITS classification in plants Other models will be added as needed Models Architecture \u00b6 class DNAClassificationModel ( nn . Module ): def __init__ ( self , config ): super () . __init__ () self . encoder = TransformerEncoder ( config ) self . classifier = nn . Linear ( config . hidden_size , config . num_labels ) self . dropout = nn . Dropout ( config . dropout_rate ) def forward ( self , input_ids , attention_mask ): # Sequence encoding embeddings = self . encoder ( input_ids , attention_mask ) # Classification logits = self . classifier ( self . dropout ( embeddings )) return logits Models Configuration \u00b6 Models can be configured via a YAML file : model : name : its_plant hidden_size : 768 num_labels : 2 dropout_rate : 0.1 max_length : 150 learning_rate : 5e-5 Models Usage \u00b6 from decaf.models import load_model # Load a model model = load_model ( \"its_plant\" ) # Prediction on a sequence sequence = \"ATCG...\" result = model . predict ( sequence )","title":"Models"},{"location":"api/models/#decaf-models","text":"","title":"DECAF Models"},{"location":"api/models/#overview","text":"DECAF uses deep learning models optimized for DNA analysis. The main models available are : its_plant : Model specialized for ITS classification in plants Other models will be added as needed","title":"Overview"},{"location":"api/models/#models-architecture","text":"class DNAClassificationModel ( nn . Module ): def __init__ ( self , config ): super () . __init__ () self . encoder = TransformerEncoder ( config ) self . classifier = nn . Linear ( config . hidden_size , config . num_labels ) self . dropout = nn . Dropout ( config . dropout_rate ) def forward ( self , input_ids , attention_mask ): # Sequence encoding embeddings = self . encoder ( input_ids , attention_mask ) # Classification logits = self . classifier ( self . dropout ( embeddings )) return logits","title":"Models Architecture"},{"location":"api/models/#models-configuration","text":"Models can be configured via a YAML file : model : name : its_plant hidden_size : 768 num_labels : 2 dropout_rate : 0.1 max_length : 150 learning_rate : 5e-5","title":"Models Configuration"},{"location":"api/models/#models-usage","text":"from decaf.models import load_model # Load a model model = load_model ( \"its_plant\" ) # Prediction on a sequence sequence = \"ATCG...\" result = model . predict ( sequence )","title":"Models Usage"},{"location":"configuration/basic/","text":"Basic Configuration \u00b6 Configuration File Structure \u00b6 DECAF configuration files use the JSON format. Here is the basic structure : [ { \"model_name\" : \"ITS_Plant\" , \"barcode\" : \"ITS\" , \"taxa\" : \"plants\" , \"categories\" : { \"1\" : \"plants\" , \"0\" : \"contaminations\" }, \"model_path\" : \"models/ITS_Plant\" , \"preprocessing\" : { \"max_length\" : 150 , \"truncation\" : true , \"padding\" : \"max_length\" }, \"training\" : { \"batch_size\" : 32 , \"learning_rate\" : 2e-5 , \"epochs\" : 5 } } ] Configuration Fields \u00b6 Model Configuration \u00b6 Field Description Example Value model_name Name of the model ITS_Plant barcode Barcode marker used ITS taxa Target taxa for classification plants categories Mapping of prediction categories {\"1\": \"plants\", \"0\": \"contaminations\"} model_path Path to the model files models/ITS_Plant Preprocessing Parameters \u00b6 Field Description Default Value max_length Maximum sequence length 150 truncation Whether to truncate sequences true padding Padding strategy max_length Training Parameters \u00b6 Field Description Default Value batch_size Batch size 32 learning_rate Learning rate 2e-5 epochs Number of epochs 5 System Configuration \u00b6 The system configuration is handled separately and is not part of the model configuration JSON. It should be configured through environment variables or command line arguments. Complete Configuration Example \u00b6 [ { \"model_name\" : \"ITS_Plant\" , \"barcode\" : \"ITS\" , \"taxa\" : \"plants\" , \"categories\" : { \"1\" : \"plants\" , \"0\" : \"contaminations\" }, \"model_path\" : \"models/ITS_Plant\" , \"preprocessing\" : { \"max_length\" : 200 , \"truncation\" : true , \"padding\" : \"max_length\" }, \"training\" : { \"batch_size\" : 64 , \"learning_rate\" : 2e-5 , \"epochs\" : 10 } } ] Best Practices \u00b6 Organisation des Fichiers Separate configurations by analysis type Maintain a reference configuration Document major changes Version Management Version the configuration files Maintain a history of changes Test each new configuration Performance Optimization Adjust batch_size based on GPU memory Adjust num_workers based on the number of cores Adjust max_length based on input data Troubleshooting \u00b6 Common Issues \u00b6 Insufficient Memory Reduce batch_size Disable GPU usage through environment variables Increase num_workers Slow Performance Increase num_workers Optimize max_length Check GPU configuration Format Issues Validate sequence input Check maximum length Verify category mapping in categories field","title":"Basic Configuration"},{"location":"configuration/basic/#basic-configuration","text":"","title":"Basic Configuration"},{"location":"configuration/basic/#configuration-file-structure","text":"DECAF configuration files use the JSON format. Here is the basic structure : [ { \"model_name\" : \"ITS_Plant\" , \"barcode\" : \"ITS\" , \"taxa\" : \"plants\" , \"categories\" : { \"1\" : \"plants\" , \"0\" : \"contaminations\" }, \"model_path\" : \"models/ITS_Plant\" , \"preprocessing\" : { \"max_length\" : 150 , \"truncation\" : true , \"padding\" : \"max_length\" }, \"training\" : { \"batch_size\" : 32 , \"learning_rate\" : 2e-5 , \"epochs\" : 5 } } ]","title":"Configuration File Structure"},{"location":"configuration/basic/#configuration-fields","text":"","title":"Configuration Fields"},{"location":"configuration/basic/#model-configuration","text":"Field Description Example Value model_name Name of the model ITS_Plant barcode Barcode marker used ITS taxa Target taxa for classification plants categories Mapping of prediction categories {\"1\": \"plants\", \"0\": \"contaminations\"} model_path Path to the model files models/ITS_Plant","title":"Model Configuration"},{"location":"configuration/basic/#preprocessing-parameters","text":"Field Description Default Value max_length Maximum sequence length 150 truncation Whether to truncate sequences true padding Padding strategy max_length","title":"Preprocessing Parameters"},{"location":"configuration/basic/#training-parameters","text":"Field Description Default Value batch_size Batch size 32 learning_rate Learning rate 2e-5 epochs Number of epochs 5","title":"Training Parameters"},{"location":"configuration/basic/#system-configuration","text":"The system configuration is handled separately and is not part of the model configuration JSON. It should be configured through environment variables or command line arguments.","title":"System Configuration"},{"location":"configuration/basic/#complete-configuration-example","text":"[ { \"model_name\" : \"ITS_Plant\" , \"barcode\" : \"ITS\" , \"taxa\" : \"plants\" , \"categories\" : { \"1\" : \"plants\" , \"0\" : \"contaminations\" }, \"model_path\" : \"models/ITS_Plant\" , \"preprocessing\" : { \"max_length\" : 200 , \"truncation\" : true , \"padding\" : \"max_length\" }, \"training\" : { \"batch_size\" : 64 , \"learning_rate\" : 2e-5 , \"epochs\" : 10 } } ]","title":"Complete Configuration Example"},{"location":"configuration/basic/#best-practices","text":"Organisation des Fichiers Separate configurations by analysis type Maintain a reference configuration Document major changes Version Management Version the configuration files Maintain a history of changes Test each new configuration Performance Optimization Adjust batch_size based on GPU memory Adjust num_workers based on the number of cores Adjust max_length based on input data","title":"Best Practices"},{"location":"configuration/basic/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"configuration/basic/#common-issues","text":"Insufficient Memory Reduce batch_size Disable GPU usage through environment variables Increase num_workers Slow Performance Increase num_workers Optimize max_length Check GPU configuration Format Issues Validate sequence input Check maximum length Verify category mapping in categories field","title":"Common Issues"},{"location":"contributing/coding-standards/","text":"DECAF Coding Standards \u00b6 This document defines the coding standards to be followed for the DECAF project. General Code Style \u00b6 Follow the PEP 8 Python code style. Use Black with default parameters for automatic code formatting. Use isort to organize imports. Use flake8 for static code analysis. File Structure \u00b6 Each module must have an __init__.py file. Test files must be named test_*.py and placed in the tests/ directory. Executable scripts must be placed in the decaf/ directory. Line Length and Indentation \u00b6 Limit of 88 characters per line (Black norm). Use 4 spaces for indentation (no tabs). Line comments must be limited to 72 characters. Naming \u00b6 Classes: Use the CamelCase format ( class ModelTrainer: ). Functions and variables: Use the snake_case format ( def process_sequence(): , sequence_data = ... ). Constants: Use uppercase with underscores ( MAX_SEQUENCE_LENGTH = 1000 ). Modules: Use short names in lowercase ( utils.py , preprocessing.py ). Avoid single-letter variable names, except for counters or iterators. Docstrings \u00b6 All public functions, classes, and methods must have docstrings. Use the NumPy/SciPy format for docstrings. Example docstring for a function: from typing import Tuple def align_sequences ( seq1 : str , seq2 : str , method : str = 'global' ) -> Tuple [ str , str , float ]: \"\"\" Align two biological sequences. Parameters ---------- seq1 : str First sequence to align seq2 : str Second sequence to align method : {'global', 'local', 'semi-global'}, default='global' Alignment method to use Returns ------- tuple A tuple containing the aligned sequences (str, str) and the score (float) Examples -------- >>> align_sequences(\"ACGT\", \"ACT\") ('ACGT', 'AC-T', 2.5) \"\"\" Comments \u00b6 Comments should explain the \"why\", not the \"how\". For complex sections, add comments explaining the logic. TODO comments should include the responsible person's identifier: # TODO(@username): Implement the normalization function Error Handling \u00b6 Use specific exceptions, not generic exceptions. Define custom exceptions in an exceptions.py module. Error messages should be informative and suggest solutions. Unit Tests \u00b6 Each function must have at least one associated test. Use pytest as the test framework. Tests must be independent of each other. Tests must verify normal and edge cases. Code Validation \u00b6 Before each commit, make sure that: 1. All tests pass ( pytest ) 2. The code is correctly formatted ( black . and isort . ) 3. No warnings are reported by flake8 ( flake8 ) 4. Type checking passes ( mypy decaf/ )","title":"Standards de codage"},{"location":"contributing/coding-standards/#decaf-coding-standards","text":"This document defines the coding standards to be followed for the DECAF project.","title":"DECAF Coding Standards"},{"location":"contributing/coding-standards/#general-code-style","text":"Follow the PEP 8 Python code style. Use Black with default parameters for automatic code formatting. Use isort to organize imports. Use flake8 for static code analysis.","title":"General Code Style"},{"location":"contributing/coding-standards/#file-structure","text":"Each module must have an __init__.py file. Test files must be named test_*.py and placed in the tests/ directory. Executable scripts must be placed in the decaf/ directory.","title":"File Structure"},{"location":"contributing/coding-standards/#line-length-and-indentation","text":"Limit of 88 characters per line (Black norm). Use 4 spaces for indentation (no tabs). Line comments must be limited to 72 characters.","title":"Line Length and Indentation"},{"location":"contributing/coding-standards/#naming","text":"Classes: Use the CamelCase format ( class ModelTrainer: ). Functions and variables: Use the snake_case format ( def process_sequence(): , sequence_data = ... ). Constants: Use uppercase with underscores ( MAX_SEQUENCE_LENGTH = 1000 ). Modules: Use short names in lowercase ( utils.py , preprocessing.py ). Avoid single-letter variable names, except for counters or iterators.","title":"Naming"},{"location":"contributing/coding-standards/#docstrings","text":"All public functions, classes, and methods must have docstrings. Use the NumPy/SciPy format for docstrings. Example docstring for a function: from typing import Tuple def align_sequences ( seq1 : str , seq2 : str , method : str = 'global' ) -> Tuple [ str , str , float ]: \"\"\" Align two biological sequences. Parameters ---------- seq1 : str First sequence to align seq2 : str Second sequence to align method : {'global', 'local', 'semi-global'}, default='global' Alignment method to use Returns ------- tuple A tuple containing the aligned sequences (str, str) and the score (float) Examples -------- >>> align_sequences(\"ACGT\", \"ACT\") ('ACGT', 'AC-T', 2.5) \"\"\"","title":"Docstrings"},{"location":"contributing/coding-standards/#comments","text":"Comments should explain the \"why\", not the \"how\". For complex sections, add comments explaining the logic. TODO comments should include the responsible person's identifier: # TODO(@username): Implement the normalization function","title":"Comments"},{"location":"contributing/coding-standards/#error-handling","text":"Use specific exceptions, not generic exceptions. Define custom exceptions in an exceptions.py module. Error messages should be informative and suggest solutions.","title":"Error Handling"},{"location":"contributing/coding-standards/#unit-tests","text":"Each function must have at least one associated test. Use pytest as the test framework. Tests must be independent of each other. Tests must verify normal and edge cases.","title":"Unit Tests"},{"location":"contributing/coding-standards/#code-validation","text":"Before each commit, make sure that: 1. All tests pass ( pytest ) 2. The code is correctly formatted ( black . and isort . ) 3. No warnings are reported by flake8 ( flake8 ) 4. Type checking passes ( mypy decaf/ )","title":"Code Validation"},{"location":"contributing/documentation-templates/","text":"Docstrings \u00b6 This file contains templates for different types of docstrings to be used in DECAF. These examples serve as a reference to maintain consistent documentation. Template for a module \u00b6 \"\"\" Module for ITS sequence processing. This module provides functions for cleaning, normalizing and preparing ITS sequences for analysis and classification. Functions --------- clean_sequence Clean a sequence by removing non-nucleotide characters. normalize_sequence Normalize a sequence for model training. extract_features Extract features from a sequence. \"\"\" Template for a class \u00b6 class SequenceProcessor : \"\"\" Class for biological sequence processing. This class implements various methods for cleaning, normalizing and extracting information from biological sequences, particularly ITS sequences from plants. Parameters ---------- min_length : int, default=100 Minimum length of sequences to process max_length : int, default=1000 Maximum length of sequences to process quality_threshold : float, default=0.9 Minimum quality threshold for sequences Attributes ---------- processed_sequences : list List of processed sequences stats : dict Statistics on processed sequences Notes ----- This class is thread-safe and can be used in a multiprocessing context. \"\"\" def __init__ ( self , min_length : int = 100 , max_length : int = 1000 , quality_threshold : float = 0.9 ) -> None : self . min_length = min_length self . max_length = max_length self . quality_threshold = quality_threshold self . processed_sequences : List [ str ] = [] self . stats : Dict [ str , Union [ int , float ]] = {} def process_batch ( self , sequences : List [ str ]) -> List [ Dict [ str , Union [ str , float ]]]: \"\"\" Process a batch of sequences. Parameters ---------- sequences : list of str List of sequences to process Returns ------- list of dict List of processed sequences with their metadata Raises ------ ValueError If a sequence contains invalid characters Examples -------- >>> processor = SequenceProcessor() >>> result = processor.process_batch([\"ACGT\", \"TACG\"]) >>> len(result) 2 \"\"\" pass Template for a function \u00b6 def calculate_gc_content ( sequence : str ) -> float : \"\"\" Calculate the GC content of a sequence. Parameters ---------- sequence : str DNA sequence Returns ------- float Proportion of G and C in the sequence (between 0 and 1) Raises ------ ValueError If the sequence contains invalid characters Examples -------- >>> calculate_gc_content(\"ACGT\") 0.5 >>> calculate_gc_content(\"AAAA\") 0.0 \"\"\" pass Template for a custom exception \u00b6 class SequenceQualityError ( Exception ): \"\"\" Exception raised when a sequence does not meet quality criteria. Parameters ---------- sequence_id : str ID of the problematic sequence issue : str Description of the quality issue \"\"\" def __init__ ( self , sequence_id : str , issue : str ) -> None : self . sequence_id = sequence_id self . issue = issue super () . __init__ ( f \"Quality issue for sequence { sequence_id } : { issue } \" )","title":"Templates de documentation"},{"location":"contributing/documentation-templates/#docstrings","text":"This file contains templates for different types of docstrings to be used in DECAF. These examples serve as a reference to maintain consistent documentation.","title":"Docstrings"},{"location":"contributing/documentation-templates/#template-for-a-module","text":"\"\"\" Module for ITS sequence processing. This module provides functions for cleaning, normalizing and preparing ITS sequences for analysis and classification. Functions --------- clean_sequence Clean a sequence by removing non-nucleotide characters. normalize_sequence Normalize a sequence for model training. extract_features Extract features from a sequence. \"\"\"","title":"Template for a module"},{"location":"contributing/documentation-templates/#template-for-a-class","text":"class SequenceProcessor : \"\"\" Class for biological sequence processing. This class implements various methods for cleaning, normalizing and extracting information from biological sequences, particularly ITS sequences from plants. Parameters ---------- min_length : int, default=100 Minimum length of sequences to process max_length : int, default=1000 Maximum length of sequences to process quality_threshold : float, default=0.9 Minimum quality threshold for sequences Attributes ---------- processed_sequences : list List of processed sequences stats : dict Statistics on processed sequences Notes ----- This class is thread-safe and can be used in a multiprocessing context. \"\"\" def __init__ ( self , min_length : int = 100 , max_length : int = 1000 , quality_threshold : float = 0.9 ) -> None : self . min_length = min_length self . max_length = max_length self . quality_threshold = quality_threshold self . processed_sequences : List [ str ] = [] self . stats : Dict [ str , Union [ int , float ]] = {} def process_batch ( self , sequences : List [ str ]) -> List [ Dict [ str , Union [ str , float ]]]: \"\"\" Process a batch of sequences. Parameters ---------- sequences : list of str List of sequences to process Returns ------- list of dict List of processed sequences with their metadata Raises ------ ValueError If a sequence contains invalid characters Examples -------- >>> processor = SequenceProcessor() >>> result = processor.process_batch([\"ACGT\", \"TACG\"]) >>> len(result) 2 \"\"\" pass","title":"Template for a class"},{"location":"contributing/documentation-templates/#template-for-a-function","text":"def calculate_gc_content ( sequence : str ) -> float : \"\"\" Calculate the GC content of a sequence. Parameters ---------- sequence : str DNA sequence Returns ------- float Proportion of G and C in the sequence (between 0 and 1) Raises ------ ValueError If the sequence contains invalid characters Examples -------- >>> calculate_gc_content(\"ACGT\") 0.5 >>> calculate_gc_content(\"AAAA\") 0.0 \"\"\" pass","title":"Template for a function"},{"location":"contributing/documentation-templates/#template-for-a-custom-exception","text":"class SequenceQualityError ( Exception ): \"\"\" Exception raised when a sequence does not meet quality criteria. Parameters ---------- sequence_id : str ID of the problematic sequence issue : str Description of the quality issue \"\"\" def __init__ ( self , sequence_id : str , issue : str ) -> None : self . sequence_id = sequence_id self . issue = issue super () . __init__ ( f \"Quality issue for sequence { sequence_id } : { issue } \" )","title":"Template for a custom exception"},{"location":"contributing/naming-conventions/","text":"Naming Conventions for DECAF \u00b6 This document defines the naming conventions to be followed for the DECAF project. General Principles \u00b6 Names must be descriptive and explicit. Prefer long and clear names to short and ambiguous names. Avoid abbreviations unless they are standard in the domain (e.g., DNA, RNA, ITS). Use English for all names. Modules and packages \u00b6 Use lowercase. Words separated by underscores if necessary. Short but descriptive names. Avoid special characters and numbers. Examples: - preprocessing - model_training - data_loaders - visualization Classes \u00b6 Use the CamelCase format (each word starts with a capital letter). Names must be nouns or nominal groups. Specific suffixes for certain types of classes: *Error or *Exception for exceptions *Manager for management classes *Factory for factory classes Examples: - SequenceProcessor - ModelTrainer - DataLoader - ConfigManager - SequenceQualityError Functions and methods \u00b6 Use the snake_case format (lowercase with underscores). Use verbs or verb phrases. Descriptive name of the behavior. Private methods prefixed with an underscore ( _ ). Examples: - clean_sequence() - train_model() - calculate_similarity_score() - _validate_input() Variables and attributes \u00b6 Use the snake_case format. Precise and descriptive name of the content. Private attributes prefixed with an underscore ( _ ). Avoid single-letter names except for counters. Examples: - sequence_data - model_parameters - gc_content - _internal_state Constants \u00b6 All uppercase with underscores. Defined at the module level. Examples: - MAX_SEQUENCE_LENGTH - DEFAULT_QUALITY_THRESHOLD - DNA_BASES Function arguments \u00b6 Use the snake_case format. Be consistent with variable names. For booleans, use prefixes such as is_ , has_ , should_ . Examples: - def process_sequence(sequence_data, is_quality_filtered=True): Iterators and loops \u00b6 For short iterators or indices, short names are acceptable. If the object has a specific meaning, use a more descriptive name. Examples: # Short and simple for i in range ( 10 ): print ( i ) # More descriptive for sequence in sequences : process_sequence ( sequence ) # With index and value for idx , base in enumerate ( sequence ): if is_valid_base ( base ): valid_bases [ idx ] = base Files \u00b6 Use lowercase. Words separated by underscores. Appropriate extensions (.py, .md, .txt, etc.). Test file names must start with test_ . Examples: - sequence_processor.py - model_training.py - test_sequence_processor.py Database tables and fields \u00b6 Tables in plural, snake_case. Fields in snake_case. Primary key named id . Foreign key named *_id . Examples: - Table: sequences , Fields: id , sequence_data , quality_score - Table: taxonomies , Fields: id , sequence_id , taxon_name Generic types and TypeHints \u00b6 Use CamelCase for custom generic types. Follow the conventions of the standard library for type annotations. Examples: from typing import List , Dict , Optional , Union SequenceData = Dict [ str , Union [ str , float ]] TaxonomyTree = Dict [ str , List [ str ]] def process_sequences ( sequences : List [ str ]) -> List [ SequenceData ]: pass","title":"Conventions de nommage"},{"location":"contributing/naming-conventions/#naming-conventions-for-decaf","text":"This document defines the naming conventions to be followed for the DECAF project.","title":"Naming Conventions for DECAF"},{"location":"contributing/naming-conventions/#general-principles","text":"Names must be descriptive and explicit. Prefer long and clear names to short and ambiguous names. Avoid abbreviations unless they are standard in the domain (e.g., DNA, RNA, ITS). Use English for all names.","title":"General Principles"},{"location":"contributing/naming-conventions/#modules-and-packages","text":"Use lowercase. Words separated by underscores if necessary. Short but descriptive names. Avoid special characters and numbers. Examples: - preprocessing - model_training - data_loaders - visualization","title":"Modules and packages"},{"location":"contributing/naming-conventions/#classes","text":"Use the CamelCase format (each word starts with a capital letter). Names must be nouns or nominal groups. Specific suffixes for certain types of classes: *Error or *Exception for exceptions *Manager for management classes *Factory for factory classes Examples: - SequenceProcessor - ModelTrainer - DataLoader - ConfigManager - SequenceQualityError","title":"Classes"},{"location":"contributing/naming-conventions/#functions-and-methods","text":"Use the snake_case format (lowercase with underscores). Use verbs or verb phrases. Descriptive name of the behavior. Private methods prefixed with an underscore ( _ ). Examples: - clean_sequence() - train_model() - calculate_similarity_score() - _validate_input()","title":"Functions and methods"},{"location":"contributing/naming-conventions/#variables-and-attributes","text":"Use the snake_case format. Precise and descriptive name of the content. Private attributes prefixed with an underscore ( _ ). Avoid single-letter names except for counters. Examples: - sequence_data - model_parameters - gc_content - _internal_state","title":"Variables and attributes"},{"location":"contributing/naming-conventions/#constants","text":"All uppercase with underscores. Defined at the module level. Examples: - MAX_SEQUENCE_LENGTH - DEFAULT_QUALITY_THRESHOLD - DNA_BASES","title":"Constants"},{"location":"contributing/naming-conventions/#function-arguments","text":"Use the snake_case format. Be consistent with variable names. For booleans, use prefixes such as is_ , has_ , should_ . Examples: - def process_sequence(sequence_data, is_quality_filtered=True):","title":"Function arguments"},{"location":"contributing/naming-conventions/#iterators-and-loops","text":"For short iterators or indices, short names are acceptable. If the object has a specific meaning, use a more descriptive name. Examples: # Short and simple for i in range ( 10 ): print ( i ) # More descriptive for sequence in sequences : process_sequence ( sequence ) # With index and value for idx , base in enumerate ( sequence ): if is_valid_base ( base ): valid_bases [ idx ] = base","title":"Iterators and loops"},{"location":"contributing/naming-conventions/#files","text":"Use lowercase. Words separated by underscores. Appropriate extensions (.py, .md, .txt, etc.). Test file names must start with test_ . Examples: - sequence_processor.py - model_training.py - test_sequence_processor.py","title":"Files"},{"location":"contributing/naming-conventions/#database-tables-and-fields","text":"Tables in plural, snake_case. Fields in snake_case. Primary key named id . Foreign key named *_id . Examples: - Table: sequences , Fields: id , sequence_data , quality_score - Table: taxonomies , Fields: id , sequence_id , taxon_name","title":"Database tables and fields"},{"location":"contributing/naming-conventions/#generic-types-and-typehints","text":"Use CamelCase for custom generic types. Follow the conventions of the standard library for type annotations. Examples: from typing import List , Dict , Optional , Union SequenceData = Dict [ str , Union [ str , float ]] TaxonomyTree = Dict [ str , List [ str ]] def process_sequences ( sequences : List [ str ]) -> List [ SequenceData ]: pass","title":"Generic types and TypeHints"},{"location":"usage/quick-start/","text":"Quick Start \u00b6 Installation \u00b6 pip install decaf Basic Analysis \u00b6 To analyze your DNA sequences: decaf --input_fastq data/test.fasta --output_folder output/ --taxa plants --barcode ITS --cpus 4 Basic Options \u00b6 Option Description Example --input_fastq Input file (FASTA/FASTQ) --input_fastq sequences.fasta --output_folder Output directory --output_folder results/ --taxa Taxonomic group --taxa plants --barcode Barcode --barcode ITS --batch-size Batch size --batch-size 32 --gpus Use GPU (0/1) --gpus 0 --cpus Number of CPU --cpus 1 Complete Example \u00b6 decaf \\ --input_fastq data/test.fasta \\ --output_folder output/ \\ --taxa plants \\ --barcode ITS \\ --batch_size 64 \\ --gpus 0 \\ --cpus 1","title":"Quick Start"},{"location":"usage/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"usage/quick-start/#installation","text":"pip install decaf","title":"Installation"},{"location":"usage/quick-start/#basic-analysis","text":"To analyze your DNA sequences: decaf --input_fastq data/test.fasta --output_folder output/ --taxa plants --barcode ITS --cpus 4","title":"Basic Analysis"},{"location":"usage/quick-start/#basic-options","text":"Option Description Example --input_fastq Input file (FASTA/FASTQ) --input_fastq sequences.fasta --output_folder Output directory --output_folder results/ --taxa Taxonomic group --taxa plants --barcode Barcode --barcode ITS --batch-size Batch size --batch-size 32 --gpus Use GPU (0/1) --gpus 0 --cpus Number of CPU --cpus 1","title":"Basic Options"},{"location":"usage/quick-start/#complete-example","text":"decaf \\ --input_fastq data/test.fasta \\ --output_folder output/ \\ --taxa plants \\ --barcode ITS \\ --batch_size 64 \\ --gpus 0 \\ --cpus 1","title":"Complete Example"}]}